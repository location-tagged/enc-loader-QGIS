# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ENCLoader
                                 A QGIS plugin
 To Load S57 files
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-28
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Prasanth
        email                : prasanth@ntcpwc.iitm.ac.in
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path 
import processing

from qgis.core import *
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QDialogButtonBox, QMessageBox
from osgeo import ogr
        
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .s57loader_dialog import ENCLoaderDialog
import os.path


class ENCLoader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
   
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ENCLoader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&S-57 Loader')
        
        self.dlg = ENCLoaderDialog()
        

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.provider = None
        
    def initProcessing(self):
        """Initialises the processing provider"""
        self.provider = Provider()
        QgsApplication.processingRegistry().addProvider(self.provider)
    
    def select_enc_file(self):
        """Shows a dialog to select a ENC file."""
        print("Button Clicked")
        filename, _ = QFileDialog.getOpenFileName(self.dlg,
                                                  "Select ENC file",
                                                  "",
                                                  "*.000")
        if filename == "":
            self.dlg.button_box.button(QDialogButtonBox.Ok).setEnabled(False)
        else:            
            self.dlg.button_box.button(QDialogButtonBox.Ok).setEnabled(True)
            self.dlg.encPathLineEdit.setText(filename) 
            print("file uploaded")
            #self.update_file_information(filename)
            
            
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ENCLoader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/s57loader/icon.png'
        
        icon_path_enc = r'C:\Users\NTCPWC\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\s57loader\icon_enc.png'
		
        icon_path_basemap = r'C:\Users\NTCPWC\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\s57loader\map.png'
        
        icon_path_gps = r'C:\Users\NTCPWC\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\s57loader\gps.png'
        
        self.add_action(
            icon_path_enc,
            text=self.tr(u'Load .000 files'),
            callback=self.run,
            parent=self.iface.mainWindow())
        
        self.add_action(
            icon_path_basemap,
            text=self.tr(u'Load Basemap'),
            callback=self.insert_basemap,
            parent=self.iface.mainWindow())
        
        self.add_action(
            icon_path_gps,
            text=self.tr(u'Show my Location'),
            callback=self.show_location,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&S-57 Loader'),
                action)
            self.iface.removeToolBarIcon(action)
            
    def insert_basemap(self):
        """Add Basemap"""
                
        service_url = 'type=xyz&url=http://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&zmax=19&zmin=0&crs=EPSG3857'
        print(service_url)        
        rlayer = QgsRasterLayer(service_url, 'OSM Basemap', 'wms')
        if rlayer.isValid():        
            QgsProject.instance().addMapLayer(rlayer)
            self.iface.mapCanvas().renderComplete.connect(self.ZoomToExtent)
        else:
            print('invalid layer')
    
    def ZoomToExtent(self,ras):  
        """ Initial Zoom Extent """
        #set_canvas_crs
        mycrs = QgsCoordinateReferenceSystem(4326)
        QgsProject.instance().setCrs(mycrs)
        
        #set_canvas_extent
        box = QgsRectangle(87.27,22.70,89.26,21.7)
        self.iface.mapCanvas().setExtent(box)
        self.iface.mapCanvas().refresh
        self.iface.mapCanvas().renderComplete.disconnect(self.ZoomToExtent)
        print('in zoom function')
                    
    def show_location(self):
        #Yet_to_Code
        print("show Location")
    

    def load_enc(self, filepath):     
            
        root = QgsProject.instance().layerTreeRoot()
        layerGroup = root.addGroup('Maritime Chart Datum')
        count = 1
        my_gpkg = filepath
        gpkg_layers = [l.GetName() for l in ogr.Open(my_gpkg )]
        print(gpkg_layers)
        for l in ogr.Open(my_gpkg ):
            if l.GetName()=='M_QUAL':
                wb = QgsVectorLayer(my_gpkg + "|layername=" + l.GetName(), l.GetName(), 'ogr') 
                QgsProject.instance().addMapLayer(wb, False)
                layerGroup.insertChildNode(count, QgsLayerTreeLayer(wb))
                wb.loadNamedStyle("C:\\Users\\NTCPWC\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\python\\plugins\\s57loader\\styles\\"+l.GetName()+".qml")
                count +=1
                for feat in wb.getFeatures():
                    geom = feat.geometry()
                    geom = geom.buffer(0.0022, -0.0022)
                    box = geom.boundingBox()
                    print(box)
                    self.iface.mapCanvas().setExtent(box)
                    self.iface.mapCanvas().refresh()
            else:
                wb = QgsVectorLayer(my_gpkg + "|layername=" + l.GetName(), l.GetName(), 'ogr') 
                QgsProject.instance().addMapLayer(wb, False)
                layerGroup.insertChildNode(count, QgsLayerTreeLayer(wb))
                wb.loadNamedStyle("C:\\Users\\NTCPWC\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\python\\plugins\\s57loader\\styles\\"+l.GetName()+".qml")
                count +=1
            
        
            """geom = wb.geometry()
            box = geom.boundingBox()
            self.iface.mapCanvas().setExtent(box)
            self.iface.mapCanvas().refresh()"""
            
            """if l.GetName()=='SOUNDG':
                processing.runalg("qgis:multiparttosingleparts",my_gpkg + "|layername=" + l.GetName(),"temp_sounding.shp")
                wb = QgsVectorLayer('temp_sounding.shp', 'SOUNDG', 'ogr') 
                QgsProject.instance().addMapLayer(wb)
            else:"""
        
        #Move BaseMap Down
        alayer = QgsProject.instance().mapLayersByName("OSM Basemap")[0]
        myalayer = root.findLayer(alayer.id())
        myClone = myalayer.clone()
        parent = myalayer.parent()
        parent.insertChildNode(-1, myClone)
        parent.removeChildNode(myalayer)
            
        """for lyr in gpkg_layers:
            wb = QgsVectorLayer(lyr, lyr, 'ogr')
            QgsProject.instance().addMapLayer(wb)"""

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ENCLoaderDialog()   
                    
        """                             
        #set_canvas_crs
        mycrs = QgsCoordinateReferenceSystem(4326)
        QgsProject.instance().setCrs(mycrs)
        """
        
        #WOW_Change#
        self.dlg.browseButton.clicked.connect(self.select_enc_file)
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            filepath = self.dlg.encPathLineEdit.text()
            print(filepath)
            self.load_enc(filepath)
            pass
